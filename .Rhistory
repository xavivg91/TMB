a
app_id <- "9a9f8b18"
app_key <- "bd04450f85ae87cf1061c2867bed5712"
bus.stations(app_id, app_key)
bus.stations(app_id, app_key)
ls
cd
bus.stations <- function(app_id, app_key){
# URL containing the requested data set
url1 <- "https://api.tmb.cat/v1/transit/parades?app_id="
url2 <- "&app_key="
url3 <- paste0(url1, app_id, url2, app_key)
# Data set
dataset <- jsonlite::fromJSON(url3, flatten=TRUE)
}
bus.stations(app_id, app_key)
mierda <- bus.stations(app_id, app_key)
View(mierda)
bus.stations <- function(app_id, app_key){
# URL containing the requested data set
url1 <- "https://api.tmb.cat/v1/transit/parades?app_id="
url2 <- "&app_key="
url3 <- paste0(url1, app_id, url2, app_key)
# Data set
dataset <- jsonlite::fromJSON(url3, flatten=TRUE)
dataset$features
}
mierda <- bus.stations(app_id, app_key)
View(mierda)
mierda <- bus.stations(app_id, app_key)
bus.stations <- function(app_id, app_key){
# URL containing the requested data set
url1 <- "https://api.tmb.cat/v1/transit/parades?app_id="
url2 <- "&app_key="
url3 <- paste0(url1, app_id, url2, app_key)
# Data set
dataset <- jsonlite::fromJSON(url3, flatten=TRUE)
}
mierda <- bus.stations(app_id, app_key)
View(mierda)
bus.stations <- function(app_id, app_key){
# URL containing the requested data set
url1 <- "https://api.tmb.cat/v1/transit/parades?app_id="
url2 <- "&app_key="
url3 <- paste0(url1, app_id, url2, app_key)
# Data set
dataset <- jsonlite::fromJSON(url3, flatten=TRUE)
dataset$features
}
bus.stations <- function(app_id, app_key){
# URL containing the requested data set
url1 <- "https://api.tmb.cat/v1/transit/linies/bus/parades?app_id="
url2 <- "&app_key="
url3 <- paste0(url1, app_id, url2, app_key)
# Data set
dataset <- jsonlite::fromJSON(url3, flatten=TRUE)
dataset$features
}
mierda <- bus.stations(app_id, app_key)
View(mierda)
bus.stations <- function(line, app_id, app_key){
# If we don't specify the line, retrieve data from all bus stations
if(missing(line)){
# URL containing the requested data set
url1 <- "https://api.tmb.cat/v1/transit/linies/bus/parades?app_id="
url2 <- "&app_key="
url3 <- paste0(url1, app_id, url2, app_key)
# Data set
dataset <- jsonlite::fromJSON(url3, flatten=TRUE)
dataset$features
# Retrieve data from bus stations corresponding to the specified line
} else{
# URL containing the requested data set
url1 <- "https://api.tmb.cat/v1/transit/linies/bus/"
url2 <- line
url3 <- "parades?app_id="
url4 <- "&app_key="
url5 <- paste0(url1, url2, url3, app_id, url4, app_key)
# Data set
dataset <- jsonlite::fromJSON(url5, flatten=TRUE)
dataset$features
}
}
mierda <- bus.stations(line=23,app_id, app_key)
mierda <- bus.stations(app_id, app_key)
mierda <- bus.stations(app_id, app_key)
bus.stations <- function(line, app_id, app_key){
# If we don't specify the line, retrieve data from all bus stations
if(missing(line)){
# URL containing the requested data set
url1 <- "https://api.tmb.cat/v1/transit/linies/bus/parades?app_id="
url2 <- "&app_key="
url3 <- paste0(url1, app_id, url2, app_key)
# Data set
dataset <- jsonlite::fromJSON(url3, flatten=TRUE)
dataset$features
# Retrieve data from bus stations corresponding to the specified line
} else{
# URL containing the requested data set
url1 <- "https://api.tmb.cat/v1/transit/linies/bus/"
url2 <- line
url3 <- "parades?app_id="
url4 <- "&app_key="
url5 <- paste0(url1, url2, url3, app_id, url4, app_key)
# Data set
dataset <- jsonlite::fromJSON(url5, flatten=TRUE)
dataset$features
}
}
mierda <- bus.stations(app_id, app_key)
bus.stations <- function(app_id, app_key, line){
# If we don't specify the line, retrieve data from all bus stations
if(missing(line)){
# URL containing the requested data set
url1 <- "https://api.tmb.cat/v1/transit/linies/bus/parades?app_id="
url2 <- "&app_key="
url3 <- paste0(url1, app_id, url2, app_key)
# Data set
dataset <- jsonlite::fromJSON(url3, flatten=TRUE)
dataset$features
# Retrieve data from bus stations corresponding to the specified line
} else{
# URL containing the requested data set
url1 <- "https://api.tmb.cat/v1/transit/linies/bus/"
url2 <- line
url3 <- "parades?app_id="
url4 <- "&app_key="
url5 <- paste0(url1, url2, url3, app_id, url4, app_key)
# Data set
dataset <- jsonlite::fromJSON(url5, flatten=TRUE)
dataset$features
}
}
mierda <- bus.stations(app_id, app_key)
mierda <- bus.stations(app_id, app_key, 23)
bus.stations <- function(app_id, app_key, line){
# If we don't specify the line, retrieve data from all bus stations
if(missing(line)){
# URL containing the requested data set
url1 <- "https://api.tmb.cat/v1/transit/linies/bus/parades?app_id="
url2 <- "&app_key="
url3 <- paste0(url1, app_id, url2, app_key)
# Data set
dataset <- jsonlite::fromJSON(url3, flatten=TRUE)
dataset$features
# Retrieve data from bus stations corresponding to the specified line
} else{
# URL containing the requested data set
url1 <- "https://api.tmb.cat/v1/transit/linies/bus/"
url2 <- line
url3 <- "/parades?app_id="
url4 <- "&app_key="
url5 <- paste0(url1, url2, url3, app_id, url4, app_key)
# Data set
dataset <- jsonlite::fromJSON(url5, flatten=TRUE)
dataset$features
}
}
mierda <- bus.stations(app_id, app_key, 23)
View(mierda)
mierda <- ""
aa <- "ao"
oo <- "joputa"
paste0(aa, mierda,oo)
install.packages("leaflet")
install.packages("leaflet.extras")
bus.stations <- function(app_id, app_key, line){
# If you don't specify the line, the function retrieves data from all bus stations
if(missing(line)){
# URL containing the requested data set
url1 <- "https://api.tmb.cat/v1/transit/linies/bus/parades?app_id="
url2 <- "&app_key="
url3 <- paste0(url1, app_id, url2, app_key)
# Data set
dataset <- jsonlite::fromJSON(url3, flatten=TRUE)
dataset$features
# The function retrieves data from bus stations corresponding to the specified line
} else{
# URL containing the requested data set
url1 <- "https://api.tmb.cat/v1/transit/linies/bus/"
url2 <- line
url3 <- "/parades?app_id="
url4 <- "&app_key="
url5 <- paste0(url1, url2, url3, app_id, url4, app_key)
# Data set
dataset <- jsonlite::fromJSON(url5, flatten=TRUE)
dataset$features
}
}
app_id <- 9a9f8b18
app_id <- "9a9f8b18"
app_key <-"bd04450f85ae87cf1061c2867bed5712"
mierda <- bus.stations(app_id, app_key, 23)
View(mierda)
library(leaflet)
library(leaflet.extras)
leaflet() %>%
# addTiles()
addTiles(group="OSM") %>%
addProviderTiles("OpenStreetMap.BlackAndWhite", group="BlackAndWhite") %>%
addProviderTiles("Esri", group="Esri") %>%
# Extras
# addSearchOSM() %>%
# addReverseSearchOSM() %>%
addResetMapButton() %>%
# Add marker layer for each sector with corresponding group name
addCircleMarkers(data=mierda , color="blue",
group="Underground", radius=5,
popup=~paste0("<b>", Transport,"</b>","<br/>", Station))
mierda %>% unnest(geometry.coordinates)
library(tidyr)
mierda %>% unnest(geometry.coordinates)
aa <- mierda %>% unnest(geometry.coordinates)
View(aa)
mierda$geometry.coordinates[1]
mierda$geometry.coordinates[,1]
mierda$geometry.coordinates[1]
mierda$geometry.coordinates[1][1]
mierda$geometry.coordinates[1]
mierda$geometry.coordinates[2]
mierda$geometry.coordinates[2][2]
mierda$geometry.coordinates$2
mierda$geometry.coordinates[1,2
2
mierda$geometry.coordinates[1,2]
uu <-mierda$geometry.coordinates[1]
uu <-mierda$geometry.coordinates[1][[1]]
mierda$geometry.coordinates[[1]]
mierda$geometry.coordinates[[1]][1]
View(aa)
bus.stations <- function(app_id, app_key, line){
# If you don't specify the line, the function retrieves data from all bus stations
if(missing(line)){
# URL containing the requested data set
url1 <- "https://api.tmb.cat/v1/transit/linies/bus/parades?app_id="
url2 <- "&app_key="
url3 <- paste0(url1, app_id, url2, app_key)
# Data set
dataset <- jsonlite::fromJSON(url3, flatten=TRUE)$features
# The function retrieves data from bus stations corresponding to the specified line
}else{
# URL containing the requested data set
url1 <- "https://api.tmb.cat/v1/transit/linies/bus/"
url2 <- "/parades?app_id="
url3 <- "&app_key="
url4 <- paste0(url1, line, url2, app_id, url3, app_key)
# Data set
dataset <- jsonlite::fromJSON(url4, flatten=TRUE)$features
}
latitude <- vector()
longitude <- vector()
# Latitude and longitude in separate columns
for(i in 1:nrow(dataset)){
latitude[i] <- dataset$geometry.coordinates[[i]][1]
longitude[i] <- dataset$geometry.coordinates[[i]][2]
}
dataset <- cbind(dataset, latitude, longitude)
}
mierda <- bus.stations(app_id, app_key, 23)
View(mierda)
leaflet() %>%
# addTiles()
addTiles(group="OSM") %>%
addProviderTiles("OpenStreetMap.BlackAndWhite", group="BlackAndWhite") %>%
addProviderTiles("Esri", group="Esri") %>%
# Extras
# addSearchOSM() %>%
# addReverseSearchOSM() %>%
addResetMapButton() %>%
# Add marker layer for each sector with corresponding group name
addCircleMarkers(data=mierda , color="blue",
group="Underground", radius=5,
popup=~paste0("<b>", Transport,"</b>","<br/>", Station))
leaflet() %>%
# addTiles()
addTiles(group="OSM") %>%
addProviderTiles("OpenStreetMap.BlackAndWhite", group="BlackAndWhite") %>%
addProviderTiles("Esri", group="Esri") %>%
# Extras
# addSearchOSM() %>%
# addReverseSearchOSM() %>%
addResetMapButton() %>%
# Add marker layer for each sector with corresponding group name
addCircleMarkers(data=mierda , color="blue",
radius=5,
popup=~paste0("<b>", properties.NOM_PARADA,"</b>","<br/>", properties.NOM_DISTRICTE))
leaflet() %>%
# addTiles()
addTiles(group="OSM") %>%
addProviderTiles("OpenStreetMap.BlackAndWhite", group="BlackAndWhite") %>%
addProviderTiles("Esri", group="Esri") %>%
# Extras
# addSearchOSM() %>%
# addReverseSearchOSM() %>%
addResetMapButton() %>%
# Add marker layer for each sector with corresponding group name
addCircleMarkers(data=mierda , color="blue",
radius=5, group = "23",
popup=~paste0("<b>", properties.NOM_PARADA,"</b>","<br/>", properties.NOM_DISTRICTE)) %>%
addLayersControl(overlayGroups=c("23"),
baseGroups=c("OSM", "BlackAndWhite", "Esri")) %>%
# Add legend
addLegend(position="bottomleft")
leaflet() %>%
# addTiles()
addTiles(group="OSM") %>%
addProviderTiles("OpenStreetMap.BlackAndWhite", group="BlackAndWhite") %>%
addProviderTiles("Esri", group="Esri") %>%
# Extras
# addSearchOSM() %>%
# addReverseSearchOSM() %>%
addResetMapButton() %>%
# Add marker layer for each sector with corresponding group name
addCircleMarkers(data=mierda , color="blue",
radius=5, group = "23",
popup=~paste0("<b>", properties.NOM_PARADA,"</b>","<br/>", properties.NOM_DISTRICTE)) %>%
addLayersControl(overlayGroups=c("23"),
baseGroups=c("OSM", "BlackAndWhite", "Esri")) %>%
# Add legend
addLegend(position="bottomleft",
colors=c("blue"),
labels=c("23"))
install.packages("qmap")
